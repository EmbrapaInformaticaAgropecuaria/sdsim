% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sdOutput.R
\docType{data}
\name{sdOutput}
\alias{sdOutput}
\alias{sdOutputClass}
\title{Class Representation of a Simulation Output}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
sdOutputClass
}
\description{
Represents a model simulation output obtained with the 
\code{\link{sdSimulate}} function. 
It contains the output trajectory, the auxiliary equations 
trajectory, the input time series variables trajectory, the simulation 
diagnostics and the postProcess function return value.
}
\details{
It has methods for saving the output, graphically visualizing the stored 
trajectories 
(\code{$plot()}) and for summarizing the trajectories (\code{$summary()}).
}
\section{Fields}{

\describe{
\item{\code{outputId}}{The output id, generated in the initialization as: 
"Simulation Output " + Sys.time().}

\item{\code{model}}{The model simulated. A \code{\link{sdStaticModelClass}}, a 
\code{\link{sdModelClass}} or a \code{\link{sdCoupledModelClass}} object.}

\item{\code{scenario}}{The \code{\link{sdScenarioClass}} object used in the 
simulation, if any.}

\item{\code{outTrajectory}}{In case of a \code{\link{sdStaticModelClass}}: 
a data.frame 
with the algebraic equations trajectories of the simulation. This data.frame 
have up to as many rows as elements in the time sequence and as many columns 
as variables in the \code{eq} list plus an additional column (the first) for 
the time sequence values. The names of the \code{eq} list will be 
used to label the columns of the algebraic equations data.frame.

In case of a \code{\link{sdModelClass}} or a 
\code{\link{sdCoupledModelClass}}: a 
data.frame with the ODE output of the simulation. This data.frame have up to 
as many rows as elements in the time sequence and as many columns as 
variables in the \code{state} list plus the number of auxiliary values 
returned in the second and following elements of the return list from 
\code{DifferentialEquations}, plus an additional column (the first) for the 
time sequence values. There will be one row for each element in times unless 
the integrator returns with an unrecoverable error. 
If the \code{state} list and the auxiliary values have a names attribute, 
they will be used to label the columns of the output data.frame.}

\item{\code{auxTrajectory}}{Just in case of a \code{\link{sdModelClass}} or a 
\code{\link{sdCoupledModelClass}}:
A data.frame with the auxiliary equations trajectories 
of the simulation. This data.frame have up to as many rows as elements in the 
time sequence and as many columns as variables in the \code{aux} list plus an 
additional column (the first) for the time sequence values. The 
names of the \code{aux} list will be used to label the columns of the 
auxiliary equations data.frame.}

\item{\code{timeSeriesTrajectory}}{A data.frame with the time series variables 
simulation trajectories. This data.frame have up to as many rows as elements 
in the time sequence and as many columns as variables in the 
\code{interpolation_} list plus an additional column (the first) for the 
time sequence values. The names of the \code{input} time series variables 
will be used to label the columns of the time series data.frame.}

\item{\code{diagnostics}}{A string with the simulation diagnostics, e.g. 
number of steps taken, the last step size, root informations, etc. See
\code{\link[deSolve]{diagnostics}} for more informations.}

\item{\code{postProcess}}{The return value of the \code{model} 
\code{PostProcessVars} function.}
}}

\section{Public Methods Definition}{
  
\describe{
\item{\code{$print()}}{Print the last 10 rows of the data.frames 
trajectories.}

\item{\code{$summary()}}{Print the data.frame trajectories summary.}

\item{\code{$plot(..., xlab = NULL, ylab = NULL, main = NULL, sub = NULL, 
type = "l", maxRow = 2, maxCol = 2, plotSymbol = 1, symbolSize = 2.5,
legendPosition = "topright", multipleYAxis = F, units = T, 
col = c("black", "red", "blue", "green4", "darkorange", "darkmagenta", 
"khaki4", "cyan", "gold2", "hotpink"))}}{Plot the formulas given in the ... 
argument using the data.frames trajectories.

\strong{Arguments}

\describe{
\item{...}{A list of strings with each element describing a formula with the 
variables to plot. 

The formulas must follow the standard: \code{"y"}, \code{"y1 y2 yn"}, 
\code{"y ~ x"} or \code{"y1 y2 yn ~ x"}.

Where \code{yn} are the n variables names to be plotted in the y-axis, 
separated by a white space, or a single \code{y} variable name; 

the symbol \code{~} is the separator to be used in the formulas when passing 
the x variable; 

and \code{x} is the name of the variable to be plotted in the x-axis, by 
default the simulation time sequence will be used in the x-axis and no 
variable name need to be informed (e.g. omitting "~ x"). 

When plotting more than one variable in the y-axis consider using the argument 
\code{multipleYAxis = TRUE}.}
\item{xlab}{A list with the labels for the plots x-axis. Must have the same 
length as the argument '...'.}
\item{ylab}{A list with the labels for the plots y-axis. Must have the same 
length as the argument '...'. In case of plotting multiple y variables and 
setting \code{multipleYAxis = TRUE} the corresponding elements of this list 
must be a vector with the same length of y variables to be plotted (n).}
\item{main}{A list with the overall titles for the plots. Must have the same 
length as the argument '...'.}
\item{sub}{A list with the sub titles for the plots. Must have the same 
length as the argument '...'.}
\item{type}{What type of plot should be drawn. See \code{\link{plot}} for the
available options. Default is 'l', for lines.}
\item{maxRow}{The number of rows in the plots layout. Default is 2.}
\item{maxCol}{The number of columns in the plots layout. Default is 2.}
\item{plotSymbol}{The line type (lty) or the character to be used in plotting 
points (pch). See \code{\link[graphics]{par}}, the parameters 
'lty' and 'pch', for the detailed information about the possible values and 
their interpretation. Default is 1.}
\item{symbolSize}{The line width, a positive number, defaulting to 2.5. The 
interpretation is device-specific, and some devices do not implement line 
widths less than one. (See the help on the device for details of the 
interpretation and the help on \code{\link[graphics]{par}} for other 
details in the parameter 'lwd'.)}
\item{legendPosition}{A single keyword from the list "bottomright", "bottom", 
"bottomleft", "left", "topleft", "top", "topright", "right" and "center". 
This places the legend on the inside of the plot frame at the given location. 
Partial argument matching is used. Default is "topright".}
\item{multipleYAxis}{Logical; if TRUE, plot one y-axis range per y variable. 
If FALSE plot all the y variables in the same y-axis range. Default is 
FALSE.}
\item{units}{Logical; If TRUE, concatenate the unit value stored in the model
default scenario to the x-axis and y-axis label, when there is one variable 
per axis or \code{multipleYAxis = TRUE}. Default is FALSE.}
\item{col}{A vector with the color of points or lines appearing in the 
legend. A selection of colors is used as default. If the amount of variables 
to be plotted is greater than the length of the selected colors, extra colors 
from the \code{\link[grDevices]{colors}} function will be used.}
}}

\item{\code{$saveSimulationTrajectories(path = "directory")}}{Save the 
simulation trajectories to text files, and the model and the scenario to XML 
files inside the \code{path} directory.

\strong{Arguments}

\describe{
\item{path}{A string with the directory name to save the files. If missing 
uses the \code{outputId} to name the created directory in the current working
directory.}
}}
}
}

\examples{
## Let's load the Arenstorf model from the sdsim repository and then simulate
# it to explore the output object functionalities 
arenstorf <- sdLoadModel(file = "Arenstorf", repository = TRUE)
outaren <- sdSimulate(model = arenstorf)

# print the output object to visualize the simulation diagnostics and 
# the last 10 lines of the variables trajectories
outaren$print()

# print the summary of all the variables trajectories
outaren$summary()

# visualize the entire output trajectory until the max.print
outaren$outTrajectory

# visualize the circular rotation of the bodies and
# the coordinates derivatives over time,
# concatenating the units of the variables stored in the default scenario;
outaren$plot("y1 ~ y2", "dy1 dy2", units = TRUE,
             main = c("Rotation Coordinates", 
                      "Rotation Coordinates Derivatives"))

# use multipleYAxis = TRUE for a better visualization of the derivatives
outaren$plot("dy1 dy2", multipleYAxis = TRUE,
             main = "Rotation Coordinates Derivatives")

# save the simulation trajectories for further use
outaren$saveSimulationTrajectories("Arenstorf")
}
\keyword{datasets}
