% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/constructors.R
\name{sdCoupledModel}
\alias{sdCoupledModel}
\title{Creates a Coupled System Dynamics Model}
\usage{
sdCoupledModel(coupledModelId = NULL, coupledModelDescription = NULL,
  components = NULL, connections = NULL)
}
\arguments{
\item{coupledModelId}{A character string with the coupled model ID. Any 
non-word character will be removed and the result will be converted to a 
valid name (see \code{\link[base]{make.names}}).}

\item{coupledModelDescription}{A character string with the coupled model 
description.}

\item{components}{A list of \code{\link{sdAtomicModelClass}}, 
\code{\link{sdStaticModelClass}} and/or \code{\link{sdCoupledModelClass}} 
objects. 

The models must have different \code{ID}'s that will be used as unique 
identifiers, otherwise only the last model added with the same ID will be 
kept.}

\item{connections}{A list of vectors that specifies the connections. 

Each vector represents a connection, it must have 5 elements and be defined 
as:

c(ID, Component 1, Input 1, Component 2, Output 2). 

Where ID: is the 
connection identification; Component 1: is the identification of the receiver 
component; Input 1: is the name of the input variable from the receiver 
component (component 1); Component 2: is the identification of the sender 
component; and Output 2: is the name of the connected state variable or, 
auxiliary or algebraic, equation with prefix st$, aux$ or eq$, respectively, 
indicating the output type from the sender component (Component 2), e.g. 
st$<varName>, aux$<eqName> or eq$<eqName>.}
}
\value{
A \code{\link{sdCoupledModelClass}} object.
}
\description{
A factory function that creates a \code{\link{sdCoupledModelClass}} object 
made up of instanced
\code{\link{sdAtomicModelClass}}, \code{\link{sdStaticModelClass}} and/or 
\code{\link{sdCoupledModelClass}} components and a list of connections that 
define the flow of information between components.
 
To load a coupled model from a XML file use the 
\code{\link{sdLoadModel}} function.
}
\details{
To simulate a coupled model in different scenarios use the 
\code{\link{sdSimulate}} function.

To build the default coupled scenario use the 
\code{\link{sdBuildCoupledScenario}} function. Make sure to build it before 
running the simulation to save some computation time.
}
\examples{
# The Lotka-Volterra consumer-prey model implemented as a coupled model with
# the components being the population models of a prey and a consumer

# set the time sequence and use the default method
times <- list(from = 0, to = 200, by = 1)

# Prey model variables and ode function
stPrey <- list(P = 1)
parsPrey      <- list(rG = 1.0,      
                      K  = 10)
inpPrey <- list(IngestC = 0)
auxPrey <- list(GrowthP = "par$rG * st$P * (1 - st$P/par$K)")

LVodePrey <- function(t, st, ct, par, inp, sw, aux) 
{
  dP    <- aux$GrowthP - inp$IngestC
  
  return(list(c(dP)))
}

# create the component prey model

# Consumer model variables and ode function
stConsumer <- list(C = 2)
parsConsumer  <- list(rI = 0.2,
                      rM = 0.2 ,   
                      AE = 0.5) 
inpConsumer <- list(P = 0)
auxConsumer <- list(IngestC = "par$rI * inp$P * st$C",
                    "MortC <- par$rM * st$C")

LVodeConsumer <- function(t, st, ct, par, inp, sw, aux) 
{
  dC    <- aux$IngestC * par$AE - aux$MortC
  
  return(list(c(dC)))
}

# create the component consumer model

# create the coupled model connections list 
# conP: inform the consumer model about the amount of preys and 
# conIngestC: inform the prey model about the consumer ingestion
lvConnections <- list(c("conP", "Consumer", "P", "Prey", "st$P"),
                      c("conIngestC", "Prey", "IngestC", "Consumer", "aux$IngestC"))

# Create the Lotka-Volterra coupled model
coupledLV <- sdCoupledModel(coupledModelId = "LVCoupled",
                            components = c(prey, consumer),
                            connections = lvConnections,
                            "Lotka-Volterra Equations implemented as coupled model")
# build the coupled model and validate it
coupledLV$buildCoupledModel(from = 0, 
                            to = 200, 
                            by = 1)
coupledLV$verifyModel(verbose = TRUE)

# simulate the coupled model and plot the results
outclv <- sdSimulate(model = coupledLV)
outclv$plot("Prey.P Consumer.C", 
            main = "Coupled Prey and Consumer by Lotka-Volterra",
            multipleYAxis = TRUE)
}
