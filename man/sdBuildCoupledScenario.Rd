% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sdCoupledModel.R
\name{sdBuildCoupledScenario}
\alias{sdBuildCoupledScenario}
\title{Builds a Coupled Scenario}
\usage{
sdBuildCoupledScenario(id = NULL, scenarios = NULL, from = NULL,
  to = NULL, by = NULL, method = c("lsoda", "lsode", "lsodes", "lsodar",
  "vode", "daspk", "euler", "rk4", "ode23", "ode45", "radau", "bdf", "bdf_d",
  "adams", "impAdams", "impAdams_d"), timeSeriesDirectory = "",
  varNames = FALSE)
}
\arguments{
\item{id}{A string with the coupled scenario ID. If missing a
default timestamp ID will be created.}

\item{scenarios}{A named list of not empty \code{\link{sdScenarioClass}} 
objects and/or character strings with a sdScenario XML or EXCEL file name. 

When passing a scenario in a EXCEL file it should follow the default format 
described in the \code{\link{sdLoadScenario}} documentation.
All the scenario elements of this list must be named with the model ID that 
will use it.}

\item{from}{The starting value of the time sequence. Numeric of
length 1.}

\item{to}{The end (maximal) value of the time sequence. Numeric of length 1.}

\item{by}{number: increment of the time sequence.}

\item{method}{The integrator to be used in the simulation,
a string ("lsoda", "lsode", "lsodes","lsodar","vode", "daspk", "euler",
"rk4", "ode23", "ode45", "radau", "bdf", "bdf_d", "adams", "impAdams" or
"impAdams_d"). Default value is "lsoda".

When running with support to events the given method must
be one of the following routines, which have root-finding capability:
\code{\link[deSolve]{lsoda}}, \code{\link[deSolve]{lsode}} or
\code{\link[deSolve]{radau}}; If the given method is different from any of
these three routines the simulator will run with the default method
"lsoda".

See the \code{\link[deSolve]{ode}} and the \code{\link[deSolve]{events}}
details section for more information.}

\item{timeSeriesDirectory}{The directory where time series inputs are stored 
(when passing the time series inputs via external text files).}

\item{varNames}{logical: if \code{TRUE} the return value is a list with two
elements - the \code{coupledScenario} containing the built coupled
scenario object and the \code{varNames} containing a list of all the
\code{scenarios} variables names; if \code{FALSE} the return value is just
the coupled scenario object, the default.}
}
\value{
Either the coupled scenario object with all variables named with 
the prefix 'ModelId.' followed by the original variable name or, if 
\code{varNames} is \code{TRUE}, a list with two
elements - the \code{coupledScenario} containing the built coupled
scenario object and the \code{varNames} containing a list of all the
\code{scenarios} variables names.
}
\description{
Merge a named list of \code{\link{sdScenarioClass}} objects in to a unique 
coupled scenario object with all the variables named with the prefix 
'ModelId.' followed by the original variable name. The 'ModelId' is the name 
of each element in the \code{scenarios} list and must be the same name of the 
component ID that will use it.
Use the arguments to define the coupled scenario simulation time sequence 
(the arguments \code{from}, \code{to} and \code{by} must be present to define 
the time sequence) and the integrator method to be used in the simulations 
(or the default 'lsoda' will be used).
}
\examples{
## Let's build a coupled scenario for the Lotka-Volterra example model 
# presented in the help('sdCoupledModel')

# create the Prey model variables and scenario
stPrey <- list(P = 1)
parsPrey      <- list(rG = 1.0,      
                      K  = 10)
inpPrey <- list(IngestC = 0)

preyScen <- sdScenario(id = "preyScen",
                       state = stPrey,
                       parameter = parsPrey,
                       input = inpPrey)
                       
# create the Consumer model variables and scenario
stConsumer <- list(C = 2)
parsConsumer  <- list(rI = 0.2,
                      rM = 0.2 ,   
                      AE = 0.5) 
inpConsumer <- list(P = 0)

consumerScen <- sdScenario(id = "consumerScen",
                           state = stConsumer,
                           parameter = parsConsumer,
                           input = inpConsumer)
                           
## Create the coupled scenario and print it
coupledLvScen <- sdBuildCoupledScenario(
  id = "LVcoupled",
  scenarios = c(Prey = preyScen, 
                Consumer = consumerScen), 
  method = "lsoda",
  from = 0,
  to = 200,
  by = 1) 
print(coupledLvScen)  
## this scenario can be used to simulate the coupled Lotka-Volterra Model
# in a different environment by setting different values for the variables 
# and passing it via the argument 'scenario' to the sdSimulate function           
}
